"use strict";

/*!
 * Github Search Client
 *
 */

/** Module Dependencies */
var https = require('https')
  , qs = require('querystring');

/**
 * Class for handling communications with Github's Search API.
 *
 * @param {Options} options The Client's options object.
 */
function GithubSearch(options) {
    if (!(this instanceof GithubSearch)) {
        return new GithubSearch(options);
    }

    // Default Client Options
    this.defaults = {
        apiKey: null,

        headers: {
            'Accept': '*/*',
            'Connection': 'close',
            'Content-Type': 'application/vnd.github.preview', // TODO: append .text-match+json for text match metadata
            'User-Agent': 'node-github-search/'
        },

        restBase:           'https://api.github.com',
        searchReposUrl:     '/search/repositories',
        searchCodeUrl:      '/search/code',
        searchIssuesUrl:    '/search/issues',
        searchUsersUrl:     '/search/users',
    };

    this.options = utils.merge(this.defaults, options);
}

/**
    Example: https://api.github.com/search/repositories?q=tetris+language:assembly&sort=stars&order=desc

    q
        The search terms. This can be any combination of the supported repository search parameters:

        Search In Qualifies which fields are searched. With this qualifier you can restrict the search to just the repository name, description, readme, or any combination of these.

        Size Finds repositories that match a certain size (in kilobytes).

        Forks Specifies the number of forks a repository could have.

        Created and Last Updated Filters repositories based on times of creation, or when they were last updated.

        Users or Repositories Limits searches to a specific user or repository.

        Languages Searches repositories based on the language theyâ€™re written in.

        Stars Searches repositories based on the number of stars.
        sort

        Optional Sort field. One of stars, forks, or updated. If not provided, results are sorted by best match.
        order

        Optional Sort order if sort parameter is provided. One of asc or desc; the default is desc.
*/

/** 
 * Issues an HTTP GET request.
 *
 * @param {String}    url    String of the URL to issue the request to.
 * @param {Function}    callback    Callback function that will be called when the processing is done.
 */
GithubSearch.prototype.get = function(url, callback) {

    if (typeof callback !== 'function') {
        throw new Error('ERROR: Invalid callback function.');
    }

    if (url == null) {
        throw new Error('ERROR: Invalid URL called.');
    }

    // Holds data from HTTP response body
    var body = [];
    var req = https.request(url, function(res) {
      res.setEncoding('utf8');
      res.on('data', function (chunk) {
        body += chunk;
      });
      res.on('end', function() {
        callback(JSON.parse(body));
      });
    });

    req.on('error', function(e) {
      console.log('ERROR: ' + e.message);
    });
    req.end();

    return this;
}

/**
 * Search Github Repositories
 *
 * @param {Object}    parameters
 * @param {Function}    callback function
 */
GithubSearch.prototype.searchRepos = function(params, callback) {
    var url = this.options.restBase + this.options.searchReposUrl + qs.stringify(params);
    this.get(url, function(data) {
      callback(data);
    });
    return this;
}

/**
 * Search Github Code
 *
 * @param {Object}    parameters
 * @param {Function}    callback function
 */
GithubSearch.prototype.searchCode = function(params, callback) {
    var url = this.options.restBase + this.options.searchCodeUrl + qs.stringify(params);
    this.get(url, function(data) {
      callback(data);
    });
    return this;
}

/**
 * Search Github Issues
 *
 * @param {Object}    parameters
 * @param {Function}    callback function
 */
GithubSearch.prototype.searchIssues = function(params, callback) {
    var url = this.options.restBase + this.options.searchIssuesUrl + qs.stringify(params);
    this.get(url, function(data) {
      callback(data);
    });
    return this;
}

/**
 * Search Github Users
 *
 * @param {Object}    parameters
 * @param {Function}    callback function
 */
GithubSearch.prototype.searchUsers = function(params, callbaack) {
    var url = this.options.restBase + this.options.searchUsersUrl + qs.stringify(params);
    this.get(url, function(data) {
      callback(data);
    });
    return this;
}
module.exports = GithubSearch;